"use strict";(self.webpackChunkgo_labx_github_io=self.webpackChunkgo_labx_github_io||[]).push([[1415],{9613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=s(r),u=a,m=h["".concat(l,".").concat(u)]||h[u]||c[u]||o;return r?n.createElement(m,d(d({ref:t},p),{},{components:r})):n.createElement(m,d({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,d=new Array(o);d[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:a,d[1]=i;for(var s=2;s<o;s++)d[s]=r[s];return n.createElement.apply(null,d)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6106:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(1163),a=(r(9496),r(9613));const o={},d="Response Header",i={unversionedId:"examples/response_header",id:"examples/response_header",title:"Response Header",description:"In an HTTP response, headers are metadata used to describe the content and format of the response. In Lightning, the following methods can be used to manipulate response headers:",source:"@site/docs/examples/response_header.md",sourceDirName:"examples",slug:"/examples/response_header",permalink:"/docs/examples/response_header",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Routing Group",permalink:"/docs/examples/routing_group"},next:{title:"Response Body",permalink:"/docs/examples/response_body"}},l={},s=[{value:"AddHeader",id:"addheader",level:3},{value:"SetHeader",id:"setheader",level:3},{value:"DelHeader",id:"delheader",level:3}],p={toc:s},h="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(h,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"response-header"},"Response Header"),(0,a.kt)("p",null,"In an HTTP response, headers are metadata used to describe the content and format of the response. In ",(0,a.kt)("inlineCode",{parentName:"p"},"Lightning"),", the following methods can be used to manipulate response headers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "net/http"\n\n    "github.com/go-labx/lightning"\n)\n\nfunc main() {\n    app := lightning.DefaultApp()\n\n    app.Get("/ping", func(ctx *lightning.Context) {\n        // Add multiple headers with the same key "foo"\n        ctx.AddHeader("foo", "bar")\n        ctx.AddHeader("foo", "baz")\n        ctx.AddHeader("foo", "baq")\n\n        // set a header with key "id" and value "ewh2mime9purchaser4error"\n        ctx.SetHeader("id", "ewh2mime9purchaser4error")\n\n        // delete all headers with key "bar"\n        ctx.DelHeader("bar")\n\n        ctx.JSON(http.StatusOK, lightning.Map{\n            "message": "pong",\n        })\n    })\n\n    app.Run()\n}\n')),(0,a.kt)("h3",{id:"addheader"},"AddHeader"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"AddHeader")," method is used to add multiple headers with the same key. In the provided code block, we can see that ",(0,a.kt)("inlineCode",{parentName:"p"},'ctx.AddHeader("foo", "bar")'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'ctx.AddHeader("foo", "baz")'),", and ",(0,a.kt)("inlineCode",{parentName:"p"},'ctx.AddHeader("foo", "baq")'),' all add headers with the key "foo". This means that the response will have multiple headers with the same key, each with a different value.'),(0,a.kt)("h3",{id:"setheader"},"SetHeader"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SetHeader")," method is used to set a single header with a specific key and value. In the provided code block, we can see that ",(0,a.kt)("inlineCode",{parentName:"p"},'ctx.SetHeader("id", "ewh2mime9purchaser4error")'),' sets a header with the key "id" and the value "ewh2mime9purchaser4error". This means that the response will have a single header with the key "id" and the value "ewh2mime9purchaser4error".'),(0,a.kt)("h3",{id:"delheader"},"DelHeader"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DelHeader")," method is used to delete all headers with a given key. In the provided code block, the ",(0,a.kt)("inlineCode",{parentName:"p"},"DelHeader"),' method is called with the argument "bar", which means that all headers with the key "bar" will be deleted.'))}c.isMDXComponent=!0}}]);