"use strict";(self.webpackChunkgo_labx_github_io=self.webpackChunkgo_labx_github_io||[]).push([[846],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(1163),o=(n(9496),n(9613));const i={},a="compress",l={unversionedId:"middlewares/compress",id:"middlewares/compress",title:"compress",description:"This is a middleware for lightning that provides compression for HTTP responses. It supports four compression algorithms: Brotli, Deflate, Gzip, and Zstd.",source:"@site/docs/middlewares/compress.md",sourceDirName:"middlewares",slug:"/middlewares/compress",permalink:"/docs/middlewares/compress",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"middlewareSidebar",previous:{title:"requestid",permalink:"/docs/middlewares/requestid"},next:{title:"cors",permalink:"/docs/middlewares/cors"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Supported Encodings",id:"supported-encodings",level:2},{value:"API Documentation",id:"api-documentation",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"compress"},"compress"),(0,o.kt)("p",null,"This is a middleware for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-labx/lightning"},"lightning")," that provides compression for HTTP responses. It supports four compression algorithms: Brotli, Deflate, Gzip, and Zstd."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"To install the middleware, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/lightning-contrib/compress\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To use the middleware, import the package and add it to your lightning middleware chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/go-labx/lightning"\n    "github.com/lightning-contrib/compress"\n)\n\nfunc main() {\n    app := lightning.NewApp()\n\n    app.Use(compress.Default())\n\n    app.Get("/ping", func(ctx *lightning.Context) {\n        ctx.Text(200, "hello world")\n    })\n\n    app.Run(":6789")\n}\n')),(0,o.kt)("p",null,"By default, the middleware will use the following compression levels:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Brotli: brotli.DefaultCompression"),(0,o.kt)("li",{parentName:"ul"},"Deflate: flate.DefaultCompression"),(0,o.kt)("li",{parentName:"ul"},"Gzip: gzip.DefaultCompression")),(0,o.kt)("p",null,"You can customize the compression levels by passing options to the New function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"app.Use(compress.New(\n    compress.WithBrotliCompressionLevel(6),\n    compress.WithDeflateCompressionLevel(9),\n    compress.WithGzipCompressionLevel(1),\n))\n")),(0,o.kt)("h2",{id:"supported-encodings"},"Supported Encodings"),(0,o.kt)("p",null,"The middleware supports the following encodings:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"br (Brotli)"),(0,o.kt)("li",{parentName:"ul"},"deflate (Deflate)"),(0,o.kt)("li",{parentName:"ul"},"gzip (Gzip)"),(0,o.kt)("li",{parentName:"ul"},"zstd (Zstd)")),(0,o.kt)("p",null,"If the client sends a request with an Accept-Encoding header that includes one of these encodings, the middleware will compress the response using the corresponding algorithm."),(0,o.kt)("h2",{id:"api-documentation"},"API Documentation"),(0,o.kt)("p",null,"For detailed API documentation and usage examples, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/lightning-contrib/compress"},"documentation"),"."))}d.isMDXComponent=!0}}]);