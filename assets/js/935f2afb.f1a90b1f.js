"use strict";(self.webpackChunkgo_labx_github_io=self.webpackChunkgo_labx_github_io||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"\ud83d\udcdd Introduction","href":"/docs/introduction","docId":"introduction"},{"type":"link","label":"\ud83d\ude80 Quickstart","href":"/docs/quickstart","docId":"quickstart"},{"type":"link","label":"\ud83c\udfa8 Routing","href":"/docs/routing","docId":"routing"},{"type":"link","label":"\ud83d\udca5 Middleware","href":"/docs/middleware","docId":"middleware"},{"type":"link","label":"\ud83c\udf7b Context","href":"/docs/context","docId":"context"},{"type":"link","label":"\ud83d\udccc Validation","href":"/docs/validation","docId":"validation"},{"type":"category","label":"\ud83c\udf89 Examples","collapsed":false,"items":[{"type":"link","label":"Contextual data","href":"/docs/examples/contextual-data","docId":"examples/contextual-data"},{"type":"link","label":"Cookie","href":"/docs/examples/cookie","docId":"examples/cookie"},{"type":"link","label":"Routing Group","href":"/docs/examples/routing_group","docId":"examples/routing_group"},{"type":"link","label":"Response Header","href":"/docs/examples/response_header","docId":"examples/response_header"},{"type":"link","label":"Response Body","href":"/docs/examples/response_body","docId":"examples/response_body"},{"type":"link","label":"Redirect","href":"/docs/examples/redirect","docId":"examples/redirect"},{"type":"link","label":"Custom not found","href":"/docs/examples/custom_not_found","docId":"examples/custom_not_found"},{"type":"link","label":"Using Success and Fail Methods","href":"/docs/examples/success_and_fail","docId":"examples/success_and_fail"}],"collapsible":true},{"type":"link","label":"\ud83d\udea7 CLI","href":"/docs/cli","docId":"cli"},{"type":"link","label":"\ud83d\udea7 Deployment","href":"/docs/deployment","docId":"deployment"},{"type":"link","label":"\ud83d\udea7 FAQ","href":"/docs/faq","docId":"faq"}],"middlewareSidebar":[{"type":"link","label":"Middleware","href":"/docs/middlewares/introduction","docId":"middlewares/introduction"},{"type":"category","label":"Official middleware","collapsed":false,"items":[{"type":"link","label":"requestid","href":"/docs/middlewares/requestid","docId":"middlewares/requestid"},{"type":"link","label":"compress","href":"/docs/middlewares/compress","docId":"middlewares/compress"},{"type":"link","label":"cors","href":"/docs/middlewares/cors","docId":"middlewares/cors"},{"type":"link","label":"static","href":"/docs/middlewares/static","docId":"middlewares/static"},{"type":"link","label":"pprof","href":"/docs/middlewares/pprof","docId":"middlewares/pprof"}],"collapsible":true}]},"docs":{"benchmarks":{"id":"benchmarks","title":"benchmarks","description":""},"cli":{"id":"cli","title":"CLI Tool","description":"\ud83d\udc77\u200d\u2642\ufe0f \ud83c\udfc1 \ud83d\ude9a \u26a1 \ud83d\ude80 \ud83c\udfd7\ufe0f \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 ...","sidebar":"tutorialSidebar"},"context":{"id":"context","title":"Context","description":"The Context struct in the lightning represents the context of an HTTP request / response. It contains information about the request and response, as well as methods for manipulating them.","sidebar":"tutorialSidebar"},"deployment":{"id":"deployment","title":"Deployment","description":"\ud83d\udc77\u200d\u2642\ufe0f \ud83c\udfc1 \ud83d\ude9a \u26a1 \ud83d\ude80 \ud83c\udfd7\ufe0f \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 ...","sidebar":"tutorialSidebar"},"examples":{"id":"examples","title":"Examples","description":""},"examples/contextual-data":{"id":"examples/contextual-data","title":"Contextual data","description":"The Lightning framework provides a powerful feature called Contextual Data that allows developers to store and retrieve data within the context of a request. This feature is particularly useful for storing session data, user information, and other request-specific data.","sidebar":"tutorialSidebar"},"examples/cookie":{"id":"examples/cookie","title":"Cookie","description":"In this article, we will explore how to use Lightning\'s cookie functionality to manage cookies in your web application.","sidebar":"tutorialSidebar"},"examples/custom_not_found":{"id":"examples/custom_not_found","title":"Custom not found","description":"Lightning Framework provides an easy way to customize the 404 error functionality by modifying the NotFoundHandler. For example:","sidebar":"tutorialSidebar"},"examples/redirect":{"id":"examples/redirect","title":"Redirect","description":"In this article, we will explore how to use the redirect functionality in the Lightning framework.","sidebar":"tutorialSidebar"},"examples/response_body":{"id":"examples/response_body","title":"Response Body","description":"In this article, we will explore the various response handling functions available in the Lightning framework. With these functions, we can easily set HTTP responses in a variety of formats, including plain text, JSON, XML, and file downloads. This makes the Lightning framework a powerful tool for building web applications in Go.","sidebar":"tutorialSidebar"},"examples/response_header":{"id":"examples/response_header","title":"Response Header","description":"In an HTTP response, headers are metadata used to describe the content and format of the response. In Lightning, the following methods can be used to manipulate response headers:","sidebar":"tutorialSidebar"},"examples/routing_group":{"id":"examples/routing_group","title":"Routing Group","description":"Route grouping is particularly useful when building large web applications with many routes. By grouping related routes together, developers can more easily navigate and maintain their codebase.","sidebar":"tutorialSidebar"},"examples/success_and_fail":{"id":"examples/success_and_fail","title":"Using Success and Fail Methods","description":"In addition to basic methods such as JSON, Text, and XML, the Lightning framework provides two convenient methods, Success and Fail, for standardizing HTTP response data formats.","sidebar":"tutorialSidebar"},"faq":{"id":"faq","title":"FAQ","description":"\ud83d\udc77\u200d\u2642\ufe0f \ud83c\udfc1 \ud83d\ude9a \u26a1 \ud83d\ude80 \ud83c\udfd7\ufe0f \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 ...","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"Lightning is a lightweight and fast web framework for Go. It is designed to be easy to use and highly performant. \u26a1\ufe0f \u26a1\ufe0f \u26a1\ufe0f","sidebar":"tutorialSidebar"},"middleware":{"id":"middleware","title":"Middleware","description":"In the Go programming language, middleware is used to handle logic that is common to multiple endpoints in an application. In the Lightning framework, middleware can be used to add functionality to an application\'s global scope or to specific routes.","sidebar":"tutorialSidebar"},"middlewares/compress":{"id":"middlewares/compress","title":"compress","description":"This is a middleware for lightning that provides compression for HTTP responses. It supports four compression algorithms: Brotli, Deflate, Gzip, and Zstd.","sidebar":"middlewareSidebar"},"middlewares/cors":{"id":"middlewares/cors","title":"cors","description":"CORS (Cross-Origin Resource Sharing) is a security feature implemented in web browsers that restricts web pages from making requests to a different domain than the one that served the web page. CORS middleware is used to enable cross-origin requests in web applications.","sidebar":"middlewareSidebar"},"middlewares/introduction":{"id":"middlewares/introduction","title":"Middleware","description":"| Middleware | Description | Repository |","sidebar":"middlewareSidebar"},"middlewares/pprof":{"id":"middlewares/pprof","title":"pprof","description":"pprof is a Go package that provides a set of HTTP handlers for profiling Go programs. It is built on top of the standard net/http/pprof package and is designed to work with the lightning web framework.","sidebar":"middlewareSidebar"},"middlewares/requestid":{"id":"middlewares/requestid","title":"requestid","description":"The Lightning Request ID middleware is designed to provide unique request IDs for every incoming request and add them to logs and response headers. This helps with tracking request in a distributed system, making it easier to debug and troubleshoot issues.","sidebar":"middlewareSidebar"},"middlewares/static":{"id":"middlewares/static","title":"static","description":"The static middleware is a Go package that provides a middleware for serving static files over HTTP.","sidebar":"middlewareSidebar"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"\ud83d\ude80\ud83d\ude80\ud83d\ude80 lightning is a lightweight and fast web framework for Go. It is designed to be easy to use and highly performant.","sidebar":"tutorialSidebar"},"routing":{"id":"routing","title":"Routing","description":"The Lightning web framework provides a built-in router to handle incoming HTTP requests. In this article, we will discuss how to use the routing feature of the framework, including:","sidebar":"tutorialSidebar"},"validation":{"id":"validation","title":"Validation","description":"Lightning is a Go web framework that provides a lot of useful features, including validating user input. In this document, we will explore how to use the validating feature of the Lightning framework.","sidebar":"tutorialSidebar"}}}')}}]);